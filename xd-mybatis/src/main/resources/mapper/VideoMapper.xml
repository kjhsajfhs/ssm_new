<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.xdclass.online_class.dao.VideoMapper">
    <resultMap id="VideoResultMap" type="Video">
       <id column="id" property="id" jdbcType="INTEGER"></id>
        <result column="vedio_title" property="title" jdbcType="VARCHAR"></result>
        <result column="summary" property="summary" jdbcType="VARCHAR"></result>
        <result column="cover_img" property="coverImg" jdbcType="VARCHAR"></result>

    </resultMap>

    <select id="selectBaseFieldByIdWithResultMap" resultMap="VideoResultMap" parameterType="Video">
        select id,title as vedio_title,summary,cover_img from video where id = #{video_id}
    </select>
    
    
    
    
    <sql id="base_video_field">
        id,title,summary,cover_img
    </sql>
    <select id="selectById" resultType="Video">
         select <include refid="base_video_field"/> from video where id = #{video_id}
    </select>

    <select id="selectByPointAndTitleLike" resultType="Video">
         select * from video where point=#{point} and title like concat('%',#{title},'%')
    </select>

    <insert id="add" parameterType="Video" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `xdclass`.`video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)
         VALUES
         (#{title,jdbcType=VARCHAR},#{summary,jdbcType=VARCHAR},#{coverImg,jdbcType=VARCHAR},
         #{price,jdbcType=INTEGER},#{createTime,jdbcType=TIMESTAMP},#{point,jdbcType=DOUBLE})
    </insert>


    <insert id="addBatch" parameterType="Video">
        INSERT INTO `xdclass`.`video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)
         VALUES
         <foreach collection="list"  item="video" separator=",">
             (#{video.title,jdbcType=VARCHAR},#{video.summary,jdbcType=VARCHAR},#{video.coverImg,jdbcType=VARCHAR},
             #{video.price,jdbcType=INTEGER},#{video.createTime,jdbcType=TIMESTAMP},#{video.point,jdbcType=DOUBLE})
         </foreach>

    </insert>

    <update id="updateVideo" parameterType="Video">

        update video
        set
        title=#{title,jdbcType=VARCHAR},
        summary=#{summary,jdbcType=VARCHAR},
        cover_img=#{coverImg,jdbcType=VARCHAR},
         price=#{price,jdbcType=INTEGER},
         create_time=#{createTime,jdbcType=TIMESTAMP},
         point=#{point,jdbcType=DOUBLE}
         where
         id=#{id}

    </update>

    <update id="updateVideoSelective" parameterType="Video">

        update video
        <trim prefix="set" suffixOverrides=",">
            <if test="title!=null and title!=''">
                title=#{title,jdbcType=VARCHAR},
            </if>
            <if test="summary!=null and summary!=''">
                summary=#{summary,jdbcType=VARCHAR},
            </if>
            <if test="coverImg!=null and coverImg!=''">
                cover_img=#{coverImg,jdbcType=VARCHAR},
            </if>
            <if test="price!=null and price!='' and price!=0">
                price=#{price,jdbcType=INTEGER},
            </if>
            <if test="createTime!=null and createTime!=''">
                create_time=#{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="point!=null and point!='' and point!=0">
                point=#{point,jdbcType=DOUBLE},
            </if>
        </trim>
        where
        id=#{id}


    </update>

    <delete id="deleteByCreateTimeAndPrice" parameterType="java.util.Map">
        delete  from video where create_time <![CDATA[>]]> #{createTime} and price <![CDATA[<]]>#{price}
    </delete>

    <!--开启mapper的namespace下的⼆二级缓存-->
    <!--
    eviction:代表的是缓存回收策略略，常⻅见下⾯面两种。
    (1) LRU,最近最少使⽤用的，⼀一处最⻓长时间不不⽤用的对象
    (2) FIFO,先进先出，按对象进⼊入缓存的顺序来移除他们
    flushInterval:刷新间隔时间，单位为毫秒，这⾥里里配置的是100秒刷新，如果不不配置
    它，当SQL被执⾏行行的时候才会去刷新缓存。
    size:引⽤用数⽬目，代表缓存最多可以存储多少个对象，设置过⼤大会导致内存溢出
    readOnly:只读，缓存数据只能读取⽽而不不能修改，默认值是false
    -->
    <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>

</mapper>